project:
  name: kimiyomi-backend
  description: キミヨミのバックエンド構造定義
  version: "1.0.0"

architecture:
  pattern: Clean Architecture
  description: ドメイン駆動設計とクリーンアーキテクチャの原則に従う

layers:
  - name: Presentation Layer
    components:
      - REST API Controllers
      - GraphQL Endpoints # 使わないかも
      - WebSocket Handlers # 使わないかも

  - name: Application Layer
    components:
      - Use Cases
      - Application Services
      - DTOs

  - name: Domain Layer
    components:
      - Entities
      - Value Objects
      - Domain Services
      - Repositories Interfaces

  - name: Infrastructure Layer
    components:
      - Repository Implementations
      - External Services Integration
      - Database Access

technologies:
  backend:
    language: Go
    framework: gin-gonic/gin
    database: PostgreSQL
    caching: Redis

apis:
  rest:
    - name: User Management API
      reason: ユーザー管理
      endpoints:
        - /users: 登録、一覧、詳細、更新、削除
        - /login: ログイン
        - /logout: ログアウト
        - /profile: 自分のプロフィール、更新

    - name: Diagnosis API
      reason: 診断関連
      endpoints:
        - /diagnoses: 診断開始、質問取得
        - "/diagnoses/{id}": 診断結果取得
        - "/diagnoses/{id}/publish": 公開設定
        - "/diagnoses/{id}/unpublish": 非公開設定

    - name: Compatibility API
      reason: 相性診断
      endpoints:
        - "/compatibility/{user_id}": 特定ユーザーとの相性診断結果
        - /compatibility: 相性診断実行

    - name: Content API
      reason: コンテンツ管理
      endpoints:
        - /content: コンテンツ投稿、一覧
        - "/content/{id}": コンテンツ詳細

    - name: Payment API
      reason: 決済関連
      endpoints:
        - /subscriptions: サブスクリプション登録、解約
        - /payments: 決済処理
        - "/webhook/stripe": Stripe Webhook 受付

security:
  authentication:
    - JWT based authentication
    - Firebase Authentication

  authorization:
    - Role-based access control
    - Resource-level permissions

monitoring:
  - Application metrics
  - Error tracking
  - Performance monitoring
  - User behavior analytics

deployment:
  infrastructure: AWS
  containerization: Docker
  orchestration: Kubernetes
  ci_cd: GitHub Actions